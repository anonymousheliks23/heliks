/*
This is an autogenerated file, generated using the EzPC compiler.
*/

#include "emp-sh2pc/emp-sh2pc.h" 
using namespace emp;
using namespace std;
int bitlen = 32;
int party,port;
char *ip = "127.0.0.1"; 
template<typename T> 
vector<T> make_vector(size_t size) { 
return std::vector<T>(size); 
} 

template <typename T, typename... Args> 
auto make_vector(size_t first, Args... sizes) 
{ 
auto inner = make_vector<T>(sizes...); 
return vector<decltype(inner)>(first, inner); 
} 

const uint32_t dim =  (uint32_t)5;


int main(int argc, char** argv) {
parse_party_and_port(argv, &party, &port);
if(argc>3){
  ip=argv[3];
}
cout<<"Ip Address: "<<ip<<endl;
cout<<"Port: "<<port<<endl;
cout<<"Party: "<<(party==1? "CLIENT" : "SERVER")<<endl;
NetIO * io = new NetIO(party==ALICE ? nullptr : ip, port);
setup_semi_honest(io, party);


auto w = make_vector<Float>(dim);
if ((party == BOB)) {
cout << ("Input w:") << endl;
}
/* Variable to read the clear value corresponding to the input variable w at (4,2-4,33) */
float __tmp_in_w;
for (uint32_t i0 =  (uint32_t)0; i0 < dim; i0++){
if ((party == BOB)) {
cin >> __tmp_in_w;
}
w[i0] = Float(__tmp_in_w, BOB);
}

Float b;
if ((party == BOB)) {
cout << ("Input b:") << endl;
}
/* Variable to read the clear value corresponding to the input variable b at (5,2-5,28) */
float __tmp_in_b;
if ((party == BOB)) {
cin >> __tmp_in_b;
}
b = Float(__tmp_in_b, BOB);

auto x = make_vector<Float>(dim);
if ((party == ALICE)) {
cout << ("Input x:") << endl;
}
/* Variable to read the clear value corresponding to the input variable x at (6,2-6,33) */
float __tmp_in_x;
for (uint32_t i0 =  (uint32_t)0; i0 < dim; i0++){
if ((party == ALICE)) {
cin >> __tmp_in_x;
}
x[i0] = Float(__tmp_in_x, ALICE);
}

uint32_t lower =  (uint32_t)0;

uint32_t upper = dim;

Float acc = Float(0., PUBLIC);
for (uint32_t i = (lower - lower); i < upper; i++){
acc = acc.operator+(w[i].operator*(x[i]));
}
cout << ("Value of ((acc) >_baba (b)) ?_baba (<public ~> baba> (true)) : (<public ~> baba> (false)):") << endl;
cout << ( If(b.less_than(acc), Bit(1, PUBLIC), Bit(0, PUBLIC)).reveal<bool>(ALICE)) << endl;


finalize_semi_honest();
delete io; 
 
return 0;
}

