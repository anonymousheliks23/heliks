/*
This is an autogenerated file, generated using the EzPC compiler.
*/

#include "emp-sh2pc/emp-sh2pc.h" 
using namespace emp;
using namespace std;
int bitlen = 32;
int party,port;
char *ip = "127.0.0.1"; 
template<typename T> 
vector<T> make_vector(size_t size) { 
return std::vector<T>(size); 
} 

template <typename T, typename... Args> 
auto make_vector(size_t first, Args... sizes) 
{ 
auto inner = make_vector<T>(sizes...); 
return vector<decltype(inner)>(first, inner); 
} 


int main(int argc, char** argv) {
parse_party_and_port(argv, &party, &port);
if(argc>3){
  ip=argv[3];
}
cout<<"Ip Address: "<<ip<<endl;
cout<<"Port: "<<port<<endl;
cout<<"Party: "<<(party==1? "CLIENT" : "SERVER")<<endl;
NetIO * io = new NetIO(party==ALICE ? nullptr : ip, port);
setup_semi_honest(io, party);


Float w;
if ((party == BOB)) {
cout << ("Input w:") << endl;
}
/* Variable to read the clear value corresponding to the input variable w at (35,1-35,27) */
float __tmp_in_w;
if ((party == BOB)) {
cin >> __tmp_in_w;
}
w = Float(__tmp_in_w, BOB);

Float x;
if ((party == BOB)) {
cout << ("Input x:") << endl;
}
/* Variable to read the clear value corresponding to the input variable x at (36,1-36,27) */
float __tmp_in_x;
if ((party == BOB)) {
cin >> __tmp_in_x;
}
x = Float(__tmp_in_x, BOB);

auto z = make_vector<Float>( (int32_t)10);
if ((party == BOB)) {
cout << ("Input z:") << endl;
}
/* Variable to read the clear value corresponding to the input variable z at (37,1-37,31) */
float __tmp_in_z;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)10; i0++){
if ((party == BOB)) {
cin >> __tmp_in_z;
}
z[i0] = Float(__tmp_in_z, BOB);
}

auto a = make_vector<Float>( (int32_t)10,  (int32_t)100);
if ((party == ALICE)) {
cout << ("Input a:") << endl;
}
/* Variable to read the clear value corresponding to the input variable a at (38,1-38,36) */
float __tmp_in_a;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)10; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)100; i1++){
if ((party == ALICE)) {
cin >> __tmp_in_a;
}
a[i0][i1] = Float(__tmp_in_a, ALICE);
}
}

Bit b;
if ((party == BOB)) {
cout << ("Input b:") << endl;
}
/* Variable to read the clear value corresponding to the input variable b at (39,1-39,26) */
bool __tmp_in_b;
if ((party == BOB)) {
cin >> __tmp_in_b;
}
b = Bit(__tmp_in_b, BOB);
cout << ("Value of w:") << endl;
cout << (w.reveal<string>(BOB)) << endl;
cout << ("Value of x:") << endl;
cout << (x.reveal<string>(PUBLIC)) << endl;
cout << ("Value of z:") << endl;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)10; i0++){
cout << (z[i0].reveal<string>(BOB)) << endl;
}
cout << ("Value of a:") << endl;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)10; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)100; i1++){
cout << (a[i0][i1].reveal<string>(ALICE)) << endl;
}
}
cout << ("Value of b:") << endl;
cout << (b.reveal<bool>(PUBLIC)) << endl;


finalize_semi_honest();
delete io; 
 
return 0;
}

